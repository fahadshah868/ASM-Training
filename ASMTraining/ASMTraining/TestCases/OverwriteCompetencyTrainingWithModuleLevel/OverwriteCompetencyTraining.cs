///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ASMTraining.TestCases.OverwriteCompetencyTrainingWithModuleLevel
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The OverwriteCompetencyTraining recording.
    /// </summary>
    [TestModule("1349212b-3b54-4a26-ab2e-0442aae7bcac", ModuleType.Recording, 1)]
    public partial class OverwriteCompetencyTraining : ITestModule
    {
        /// <summary>
        /// Holds an instance of the ASMTraining.ASMTrainingRepository repository.
        /// </summary>
        public static ASMTraining.ASMTrainingRepository repo = ASMTraining.ASMTrainingRepository.Instance;

        static OverwriteCompetencyTraining instance = new OverwriteCompetencyTraining();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public OverwriteCompetencyTraining()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static OverwriteCompetencyTraining Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List.RatingICESteps' at Center", repo.ASMTraining.List.RatingICEStepsInfo, new RecordItemIndex(0));
            repo.ASMTraining.List.RatingICESteps.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Rate DSF') on item 'ASMTraining.Validate_RatingICEScreen'.", repo.ASMTraining.Validate_RatingICEScreenInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.ASMTraining.Validate_RatingICEScreenInfo, "Text", "Rate DSF");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.RouteManagement' at Center", repo.ASMTraining.RouteManagementInfo, new RecordItemIndex(2));
            repo.ASMTraining.RouteManagement.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List1.Standard' at Center", repo.ASMTraining.List1.StandardInfo, new RecordItemIndex(3));
            repo.ASMTraining.List1.Standard.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.RouteManagement' at Center", repo.ASMTraining.RouteManagementInfo, new RecordItemIndex(4));
            repo.ASMTraining.RouteManagement.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List1.PlanTheDay_PriorityOfTheDay' at Center", repo.ASMTraining.List1.PlanTheDay_PriorityOfTheDayInfo, new RecordItemIndex(5));
            repo.ASMTraining.List1.PlanTheDay_PriorityOfTheDay.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List1.Standard' at Center", repo.ASMTraining.List1.StandardInfo, new RecordItemIndex(6));
            repo.ASMTraining.List1.Standard.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List1.PlanTheDay_PriorityOfTheDay' at Center", repo.ASMTraining.List1.PlanTheDay_PriorityOfTheDayInfo, new RecordItemIndex(7));
            repo.ASMTraining.List1.PlanTheDay_PriorityOfTheDay.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List1.OutletStockCheck' at Center", repo.ASMTraining.List1.OutletStockCheckInfo, new RecordItemIndex(8));
            repo.ASMTraining.List1.OutletStockCheck.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List1.Standard' at Center", repo.ASMTraining.List1.StandardInfo, new RecordItemIndex(9));
            repo.ASMTraining.List1.Standard.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List1.OutletStockCheck' at Center", repo.ASMTraining.List1.OutletStockCheckInfo, new RecordItemIndex(10));
            repo.ASMTraining.List1.OutletStockCheck.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List1.Merchandising' at Center", repo.ASMTraining.List1.MerchandisingInfo, new RecordItemIndex(11));
            repo.ASMTraining.List1.Merchandising.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List1.Standard' at Center", repo.ASMTraining.List1.StandardInfo, new RecordItemIndex(12));
            repo.ASMTraining.List1.Standard.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'ASMTraining'.", repo.ASMTraining.SelfInfo, new RecordItemIndex(13));
            repo.ASMTraining.Self.PressKeys("{BACK}");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Training Steps') on item 'ASMTraining.Validate_TrainingStepsScreen'.", repo.ASMTraining.Validate_TrainingStepsScreenInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.ASMTraining.Validate_TrainingStepsScreenInfo, "Text", "Training Steps");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List.FieldSalesCoaching' at Center", repo.ASMTraining.List.FieldSalesCoachingInfo, new RecordItemIndex(15));
            repo.ASMTraining.List.FieldSalesCoaching.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Field Sales Coaching') on item 'ASMTraining.Validate_FieldSalesScreen'.", repo.ASMTraining.Validate_FieldSalesScreenInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.ASMTraining.Validate_FieldSalesScreenInfo, "Text", "Field Sales Coaching");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.TakePicture' at Center", repo.ASMTraining.TakePictureInfo, new RecordItemIndex(17));
            repo.ASMTraining.TakePicture.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CameraScreen'.", repo.ASMTraining.Validate_CameraScreenInfo, new RecordItemIndex(18));
            Validate.Exists(repo.ASMTraining.Validate_CameraScreenInfo);
            Delay.Milliseconds(0);
            
            UserCodeCollection.UserCode.takePhotoButton();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.DonePhotoButton' at Center", repo.ASMTraining.DonePhotoButtonInfo, new RecordItemIndex(20));
            repo.ASMTraining.DonePhotoButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Field Sales Coaching') on item 'ASMTraining.Validate_FieldSalesScreen'.", repo.ASMTraining.Validate_FieldSalesScreenInfo, new RecordItemIndex(21));
            Validate.AttributeEqual(repo.ASMTraining.Validate_FieldSalesScreenInfo, "Text", "Field Sales Coaching");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'ASMTraining'.", repo.ASMTraining.SelfInfo, new RecordItemIndex(22));
            repo.ASMTraining.Self.PressKeys("{BACK}");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Training Steps') on item 'ASMTraining.Validate_TrainingStepsScreen'.", repo.ASMTraining.Validate_TrainingStepsScreenInfo, new RecordItemIndex(23));
            Validate.AttributeEqual(repo.ASMTraining.Validate_TrainingStepsScreenInfo, "Text", "Training Steps");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List.CapturingPictureOfSuccess' at Center", repo.ASMTraining.List.CapturingPictureOfSuccessInfo, new RecordItemIndex(24));
            repo.ASMTraining.List.CapturingPictureOfSuccess.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Capturing Picture of Success') on item 'ASMTraining.Validate_CapturingPictureScreen'.", repo.ASMTraining.Validate_CapturingPictureScreenInfo, new RecordItemIndex(25));
            Validate.AttributeEqual(repo.ASMTraining.Validate_CapturingPictureScreenInfo, "Text", "Capturing Picture of Success");
            Delay.Milliseconds(0);
            
            UserCodeCollection.UserCode.capturingPictureList();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CameraScreen'.", repo.ASMTraining.Validate_CameraScreenInfo, new RecordItemIndex(27));
            Validate.Exists(repo.ASMTraining.Validate_CameraScreenInfo);
            Delay.Milliseconds(0);
            
            UserCodeCollection.UserCode.takePhotoButton();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.DonePhotoButton' at Center", repo.ASMTraining.DonePhotoButtonInfo, new RecordItemIndex(29));
            repo.ASMTraining.DonePhotoButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Capturing Picture of Success') on item 'ASMTraining.Validate_CapturingPictureScreen'.", repo.ASMTraining.Validate_CapturingPictureScreenInfo, new RecordItemIndex(30));
            Validate.AttributeEqual(repo.ASMTraining.Validate_CapturingPictureScreenInfo, "Text", "Capturing Picture of Success");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'ASMTraining'.", repo.ASMTraining.SelfInfo, new RecordItemIndex(31));
            repo.ASMTraining.Self.PressKeys("{BACK}");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Training Steps') on item 'ASMTraining.Validate_TrainingStepsScreen'.", repo.ASMTraining.Validate_TrainingStepsScreenInfo, new RecordItemIndex(32));
            Validate.AttributeEqual(repo.ASMTraining.Validate_TrainingStepsScreenInfo, "Text", "Training Steps");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List.MarketIntelligence' at Center", repo.ASMTraining.List.MarketIntelligenceInfo, new RecordItemIndex(33));
            repo.ASMTraining.List.MarketIntelligence.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Market Intelligence (Optional)') on item 'ASMTraining.Validate_MarketIntelligenceScreen'.", repo.ASMTraining.Validate_MarketIntelligenceScreenInfo, new RecordItemIndex(34));
            Validate.AttributeEqual(repo.ASMTraining.Validate_MarketIntelligenceScreenInfo, "Text", "Market Intelligence (Optional)");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.TakePicture' at Center", repo.ASMTraining.TakePictureInfo, new RecordItemIndex(35));
            repo.ASMTraining.TakePicture.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CameraScreen'.", repo.ASMTraining.Validate_CameraScreenInfo, new RecordItemIndex(36));
            Validate.Exists(repo.ASMTraining.Validate_CameraScreenInfo);
            Delay.Milliseconds(0);
            
            UserCodeCollection.UserCode.takePhotoButton();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.DonePhotoButton' at Center", repo.ASMTraining.DonePhotoButtonInfo, new RecordItemIndex(38));
            repo.ASMTraining.DonePhotoButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Market Intelligence (Optional)') on item 'ASMTraining.Validate_MarketIntelligenceScreen'.", repo.ASMTraining.Validate_MarketIntelligenceScreenInfo, new RecordItemIndex(39));
            Validate.AttributeEqual(repo.ASMTraining.Validate_MarketIntelligenceScreenInfo, "Text", "Market Intelligence (Optional)");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'ASMTraining'.", repo.ASMTraining.SelfInfo, new RecordItemIndex(40));
            repo.ASMTraining.Self.PressKeys("{BACK}");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Training Steps') on item 'ASMTraining.Validate_TrainingStepsScreen'.", repo.ASMTraining.Validate_TrainingStepsScreenInfo, new RecordItemIndex(41));
            Validate.AttributeEqual(repo.ASMTraining.Validate_TrainingStepsScreenInfo, "Text", "Training Steps");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.List.Remarks' at Center", repo.ASMTraining.List.RemarksInfo, new RecordItemIndex(42));
            repo.ASMTraining.List.Remarks.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Enter Remarks') on item 'ASMTraining.Validate_RemarksScreen'.", repo.ASMTraining.Validate_RemarksScreenInfo, new RecordItemIndex(43));
            Validate.AttributeEqual(repo.ASMTraining.Validate_RemarksScreenInfo, "Text", "Enter Remarks");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to 'Remarks12345' on item 'ASMTraining.Remark_EditText'.", repo.ASMTraining.Remark_EditTextInfo, new RecordItemIndex(44));
            repo.ASMTraining.Remark_EditText.Element.SetAttributeValue("Text", "Remarks12345");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.SubmitRemarks' at Center", repo.ASMTraining.SubmitRemarksInfo, new RecordItemIndex(45));
            repo.ASMTraining.SubmitRemarks.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validation_InfoPopUp'.", repo.ASMTraining.Validation_InfoPopUpInfo, new RecordItemIndex(46));
            Validate.Exists(repo.ASMTraining.Validation_InfoPopUpInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.OkButton' at Center", repo.ASMTraining.OkButtonInfo, new RecordItemIndex(47));
            repo.ASMTraining.OkButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Training Steps') on item 'ASMTraining.Validate_TrainingStepsScreen'.", repo.ASMTraining.Validate_TrainingStepsScreenInfo, new RecordItemIndex(48));
            Validate.AttributeEqual(repo.ASMTraining.Validate_TrainingStepsScreenInfo, "Text", "Training Steps");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.SaveTrainingButton' at Center", repo.ASMTraining.SaveTrainingButtonInfo, new RecordItemIndex(49));
            repo.ASMTraining.SaveTrainingButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_DSFRatingActivityScreen'.", repo.ASMTraining.Validate_DSFRatingActivityScreenInfo, new RecordItemIndex(50));
            Validate.Exists(repo.ASMTraining.Validate_DSFRatingActivityScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.DSFRatingSummery_BackButton' at Center", repo.ASMTraining.DSFRatingSummery_BackButtonInfo, new RecordItemIndex(51));
            repo.ASMTraining.DSFRatingSummery_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Please select shop') on item 'ASMTraining.Validate_SelectShop_Screen'.", repo.ASMTraining.Validate_SelectShop_ScreenInfo, new RecordItemIndex(52));
            Validate.AttributeEqual(repo.ASMTraining.Validate_SelectShop_ScreenInfo, "Text", "Please select shop");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.Select_Shop_BackButton' at Center", repo.ASMTraining.Select_Shop_BackButtonInfo, new RecordItemIndex(53));
            repo.ASMTraining.Select_Shop_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Please select shop') on item 'ASMTraining.Validate_SelectShopScreen'.", repo.ASMTraining.Validate_SelectShopScreenInfo, new RecordItemIndex(54));
            Validate.AttributeEqual(repo.ASMTraining.Validate_SelectShopScreenInfo, "Text", "Please select shop");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.SelectShop_BackButton' at Center", repo.ASMTraining.SelectShop_BackButtonInfo, new RecordItemIndex(55));
            repo.ASMTraining.SelectShop_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Please select DSF') on item 'ASMTraining.Validate_DsfScreen'.", repo.ASMTraining.Validate_DsfScreenInfo, new RecordItemIndex(56));
            Validate.AttributeEqual(repo.ASMTraining.Validate_DsfScreenInfo, "Text", "Please select DSF");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.SelectDSF_BackButton' at Center", repo.ASMTraining.SelectDSF_BackButtonInfo, new RecordItemIndex(57));
            repo.ASMTraining.SelectDSF_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CompetencyTrainingMainScreen'.", repo.ASMTraining.Validate_CompetencyTrainingMainScreenInfo, new RecordItemIndex(58));
            Validate.Exists(repo.ASMTraining.Validate_CompetencyTrainingMainScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.CompetencyDetailScreen_BackButton' at Center", repo.ASMTraining.CompetencyDetailScreen_BackButtonInfo, new RecordItemIndex(59));
            repo.ASMTraining.CompetencyDetailScreen_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_AsmTrainingMainScreen'.", repo.ASMTraining.Validate_AsmTrainingMainScreenInfo, new RecordItemIndex(60));
            Validate.Exists(repo.ASMTraining.Validate_AsmTrainingMainScreenInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
