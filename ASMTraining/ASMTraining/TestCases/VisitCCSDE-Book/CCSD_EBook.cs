///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ASMTraining.TestCases.VisitCCSDE_Book
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CCSD_EBook recording.
    /// </summary>
    [TestModule("8ea7fc4e-1456-414f-992a-000f1c9f09e9", ModuleType.Recording, 1)]
    public partial class CCSD_EBook : ITestModule
    {
        /// <summary>
        /// Holds an instance of the ASMTraining.ASMTrainingRepository repository.
        /// </summary>
        public static ASMTraining.ASMTrainingRepository repo = ASMTraining.ASMTrainingRepository.Instance;

        static CCSD_EBook instance = new CCSD_EBook();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CCSD_EBook()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CCSD_EBook Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '.5' with swipe duration'500ms' and step count '0' on item 'ASMTraining.Validate_AsmTrainingMainScreen'.", repo.ASMTraining.Validate_AsmTrainingMainScreenInfo, new RecordItemIndex(0));
            repo.ASMTraining.Validate_AsmTrainingMainScreen.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", ".5"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.Content.MerchandizerEBook' at Center", repo.ASMTraining.Content.MerchandizerEBookInfo, new RecordItemIndex(1));
            repo.ASMTraining.Content.MerchandizerEBook.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CCSDScreen'.", repo.ASMTraining.Validate_CCSDScreenInfo, new RecordItemIndex(2));
            Validate.Exists(repo.ASMTraining.Validate_CCSDScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.Content2.PosRanking' at Center", repo.ASMTraining.Content2.PosRankingInfo, new RecordItemIndex(3));
            repo.ASMTraining.Content2.PosRanking.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Programs') on item 'ASMTraining.Validate_POSRankingScreen'.", repo.ASMTraining.Validate_POSRankingScreenInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.ASMTraining.Validate_POSRankingScreenInfo, "Text", "Programs");
            Delay.Milliseconds(0);
            
            UserCodeCollection.UserCode.VisitProjectPrograms();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.ProjectProgram_BackButton' at Center", repo.ASMTraining.ProjectProgram_BackButtonInfo, new RecordItemIndex(6));
            repo.ASMTraining.ProjectProgram_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CCSDScreen'.", repo.ASMTraining.Validate_CCSDScreenInfo, new RecordItemIndex(7));
            Validate.Exists(repo.ASMTraining.Validate_CCSDScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.Content2.PriceList' at Center", repo.ASMTraining.Content2.PriceListInfo, new RecordItemIndex(8));
            repo.ASMTraining.Content2.PriceList.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Options') on item 'ASMTraining.Validate_PriceListScreen'.", repo.ASMTraining.Validate_PriceListScreenInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ASMTraining.Validate_PriceListScreenInfo, "Text", "Options");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.TradePrice' at Center", repo.ASMTraining.TradePriceInfo, new RecordItemIndex(10));
            repo.ASMTraining.TradePrice.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='PRICE LIST') on item 'ASMTraining.Validate_TradePriceScreen'.", repo.ASMTraining.Validate_TradePriceScreenInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ASMTraining.Validate_TradePriceScreenInfo, "Text", "PRICE LIST");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.TradePrice_BackButton' at Center", repo.ASMTraining.TradePrice_BackButtonInfo, new RecordItemIndex(12));
            repo.ASMTraining.TradePrice_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Options') on item 'ASMTraining.Validate_PriceListScreen'.", repo.ASMTraining.Validate_PriceListScreenInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.ASMTraining.Validate_PriceListScreenInfo, "Text", "Options");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.RetailPrice' at Center", repo.ASMTraining.RetailPriceInfo, new RecordItemIndex(14));
            repo.ASMTraining.RetailPrice.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='PRICE LIST') on item 'ASMTraining.Validate_RetailPriceScreen'.", repo.ASMTraining.Validate_RetailPriceScreenInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.ASMTraining.Validate_RetailPriceScreenInfo, "Text", "PRICE LIST");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.RetailPrice_BackButton' at Center", repo.ASMTraining.RetailPrice_BackButtonInfo, new RecordItemIndex(16));
            repo.ASMTraining.RetailPrice_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Options') on item 'ASMTraining.Validate_PriceListScreen'.", repo.ASMTraining.Validate_PriceListScreenInfo, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.ASMTraining.Validate_PriceListScreenInfo, "Text", "Options");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.PriceListDetail_BackButton' at Center", repo.ASMTraining.PriceListDetail_BackButtonInfo, new RecordItemIndex(18));
            repo.ASMTraining.PriceListDetail_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CCSDScreen'.", repo.ASMTraining.Validate_CCSDScreenInfo, new RecordItemIndex(19));
            Validate.Exists(repo.ASMTraining.Validate_CCSDScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.Content2.CycleActivities' at Center", repo.ASMTraining.Content2.CycleActivitiesInfo, new RecordItemIndex(20));
            repo.ASMTraining.Content2.CycleActivities.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='CYCLE ACTIVITES') on item 'ASMTraining.Validate_CycleActivitiesScreen'.", repo.ASMTraining.Validate_CycleActivitiesScreenInfo, new RecordItemIndex(21));
            Validate.AttributeEqual(repo.ASMTraining.Validate_CycleActivitiesScreenInfo, "Text", "CYCLE ACTIVITES");
            Delay.Milliseconds(0);
            
            UserCodeCollection.UserCode.visitCycleActivities();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.CycleActivities_BackButton' at Center", repo.ASMTraining.CycleActivities_BackButtonInfo, new RecordItemIndex(23));
            repo.ASMTraining.CycleActivities_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CCSDScreen'.", repo.ASMTraining.Validate_CCSDScreenInfo, new RecordItemIndex(24));
            Validate.Exists(repo.ASMTraining.Validate_CCSDScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.Content2.TVC' at Center", repo.ASMTraining.Content2.TVCInfo, new RecordItemIndex(25));
            repo.ASMTraining.Content2.TVC.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_TvcListScreen'.", repo.ASMTraining.Validate_TvcListScreenInfo, new RecordItemIndex(26));
            Validate.Exists(repo.ASMTraining.Validate_TvcListScreenInfo);
            Delay.Milliseconds(0);
            
            UserCodeCollection.UserCode.visitTVC();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'ASMTraining'.", repo.ASMTraining.SelfInfo, new RecordItemIndex(28));
            repo.ASMTraining.Self.PressKeys("{BACK}");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_TvcListScreen'.", repo.ASMTraining.Validate_TvcListScreenInfo, new RecordItemIndex(29));
            Validate.Exists(repo.ASMTraining.Validate_TvcListScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.TVC_BackButton' at Center", repo.ASMTraining.TVC_BackButtonInfo, new RecordItemIndex(30));
            repo.ASMTraining.TVC_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CCSDScreen'.", repo.ASMTraining.Validate_CCSDScreenInfo, new RecordItemIndex(31));
            Validate.Exists(repo.ASMTraining.Validate_CCSDScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'ASMTraining'.", repo.ASMTraining.SelfInfo, new RecordItemIndex(32));
            repo.ASMTraining.Self.PressKeys("{BACK}");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_AsmTrainingMainScreen'.", repo.ASMTraining.Validate_AsmTrainingMainScreenInfo, new RecordItemIndex(33));
            Validate.Exists(repo.ASMTraining.Validate_AsmTrainingMainScreenInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
