///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ASMTraining.TestCases.VisitTrainingUpdates
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The TrainingUpdates recording.
    /// </summary>
    [TestModule("0a5ceb60-cda0-4257-ad56-88006e2e810e", ModuleType.Recording, 1)]
    public partial class TrainingUpdates : ITestModule
    {
        /// <summary>
        /// Holds an instance of the ASMTraining.ASMTrainingRepository repository.
        /// </summary>
        public static ASMTraining.ASMTrainingRepository repo = ASMTraining.ASMTrainingRepository.Instance;

        static TrainingUpdates instance = new TrainingUpdates();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public TrainingUpdates()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static TrainingUpdates Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.Content.TrainingUpdate' at Center", repo.ASMTraining.Content.TrainingUpdateInfo, new RecordItemIndex(0));
            repo.ASMTraining.Content.TrainingUpdate.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_TrainingUpdatesScreen'.", repo.ASMTraining.Validate_TrainingUpdatesScreenInfo, new RecordItemIndex(1));
            Validate.Exists(repo.ASMTraining.Validate_TrainingUpdatesScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.Content1.DsfTrainingStats' at Center", repo.ASMTraining.Content1.DsfTrainingStatsInfo, new RecordItemIndex(2));
            repo.ASMTraining.Content1.DsfTrainingStats.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_DSFTrainingStatsScreen'.", repo.ASMTraining.Validate_DSFTrainingStatsScreenInfo, new RecordItemIndex(3));
            Validate.Exists(repo.ASMTraining.Validate_DSFTrainingStatsScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.DsfTraining_BackButton' at Center", repo.ASMTraining.DsfTraining_BackButtonInfo, new RecordItemIndex(4));
            repo.ASMTraining.DsfTraining_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_TrainingUpdatesScreen'.", repo.ASMTraining.Validate_TrainingUpdatesScreenInfo, new RecordItemIndex(5));
            Validate.Exists(repo.ASMTraining.Validate_TrainingUpdatesScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.Content1.CapabilityChamp' at Center", repo.ASMTraining.Content1.CapabilityChampInfo, new RecordItemIndex(6));
            repo.ASMTraining.Content1.CapabilityChamp.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CapabilityChampionsScreen'.", repo.ASMTraining.Validate_CapabilityChampionsScreenInfo, new RecordItemIndex(7));
            Validate.Exists(repo.ASMTraining.Validate_CapabilityChampionsScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.NationalChampions' at Center", repo.ASMTraining.NationalChampionsInfo, new RecordItemIndex(8));
            repo.ASMTraining.NationalChampions.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_ASM_TSEScreen'.", repo.ASMTraining.Validate_ASM_TSEScreenInfo, new RecordItemIndex(9));
            Validate.Exists(repo.ASMTraining.Validate_ASM_TSEScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.ASM_NationalChampButton' at Center", repo.ASMTraining.ASM_NationalChampButtonInfo, new RecordItemIndex(10));
            repo.ASMTraining.ASM_NationalChampButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='NATIONAL CHAMPIONS') on item 'ASMTraining.Validate_ASMNationalChampsScreen'.", repo.ASMTraining.Validate_ASMNationalChampsScreenInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ASMTraining.Validate_ASMNationalChampsScreenInfo, "Text", "NATIONAL CHAMPIONS");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.AsmNationalChamp_BackButton' at Center", repo.ASMTraining.AsmNationalChamp_BackButtonInfo, new RecordItemIndex(12));
            repo.ASMTraining.AsmNationalChamp_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_ASM_TSEScreen'.", repo.ASMTraining.Validate_ASM_TSEScreenInfo, new RecordItemIndex(13));
            Validate.Exists(repo.ASMTraining.Validate_ASM_TSEScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.TSE_NationalChampButton' at Center", repo.ASMTraining.TSE_NationalChampButtonInfo, new RecordItemIndex(14));
            repo.ASMTraining.TSE_NationalChampButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='NATIONAL CHAMPIONS') on item 'ASMTraining.Validate_TSENationalChampsScreen'.", repo.ASMTraining.Validate_TSENationalChampsScreenInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.ASMTraining.Validate_TSENationalChampsScreenInfo, "Text", "NATIONAL CHAMPIONS");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.TseNationalChamp_BackButton' at Center", repo.ASMTraining.TseNationalChamp_BackButtonInfo, new RecordItemIndex(16));
            repo.ASMTraining.TseNationalChamp_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_ASM_TSEScreen'.", repo.ASMTraining.Validate_ASM_TSEScreenInfo, new RecordItemIndex(17));
            Validate.Exists(repo.ASMTraining.Validate_ASM_TSEScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'ASMTraining'.", repo.ASMTraining.SelfInfo, new RecordItemIndex(18));
            repo.ASMTraining.Self.PressKeys("{BACK}");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CapabilityChampionsScreen'.", repo.ASMTraining.Validate_CapabilityChampionsScreenInfo, new RecordItemIndex(19));
            Validate.Exists(repo.ASMTraining.Validate_CapabilityChampionsScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.ZonalChampions' at Center", repo.ASMTraining.ZonalChampionsInfo, new RecordItemIndex(20));
            repo.ASMTraining.ZonalChampions.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.ZoneListScreen.Validate_ZoneChampionsScreen'.", repo.ASMTraining.ZoneListScreen.Validate_ZoneChampionsScreenInfo, new RecordItemIndex(21));
            Validate.Exists(repo.ASMTraining.ZoneListScreen.Validate_ZoneChampionsScreenInfo);
            Delay.Milliseconds(0);
            
            UserCodeCollection.UserCode.visitZonalChamps();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ASMTraining.ZoneListScreen.ZonalChamp_BackButton' at Center", repo.ASMTraining.ZoneListScreen.ZonalChamp_BackButtonInfo, new RecordItemIndex(23));
            repo.ASMTraining.ZoneListScreen.ZonalChamp_BackButton.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_CapabilityChampionsScreen'.", repo.ASMTraining.Validate_CapabilityChampionsScreenInfo, new RecordItemIndex(24));
            Validate.Exists(repo.ASMTraining.Validate_CapabilityChampionsScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'ASMTraining'.", repo.ASMTraining.SelfInfo, new RecordItemIndex(25));
            repo.ASMTraining.Self.PressKeys("{BACK}");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_TrainingUpdatesScreen'.", repo.ASMTraining.Validate_TrainingUpdatesScreenInfo, new RecordItemIndex(26));
            Validate.Exists(repo.ASMTraining.Validate_TrainingUpdatesScreenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key '{BACK}' press on 'ASMTraining'.", repo.ASMTraining.SelfInfo, new RecordItemIndex(27));
            repo.ASMTraining.Self.PressKeys("{BACK}");
            Delay.Milliseconds(1000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ASMTraining.Validate_AsmTrainingMainScreen'.", repo.ASMTraining.Validate_AsmTrainingMainScreenInfo, new RecordItemIndex(28));
            Validate.Exists(repo.ASMTraining.Validate_AsmTrainingMainScreenInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
